<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record --native --rate 150 --duration 25 -o FINAL_FGS_OUT/json_stdlib_native.svg -- python3 -u -</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="3749"><g><title>dumps (json/__init__.py:234) (23 samples, 0.61%)</title><rect x="0.3734%" y="100" width="0.6135%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="23"/><text x="0.6234%" y="110.50"></text></g><g><title>iterencode (json/encoder.py:214) (4 samples, 0.11%)</title><rect x="1.4137%" y="132" width="0.1067%" height="15" fill="rgb(217,0,24)" fg:x="53" fg:w="4"/><text x="1.6637%" y="142.50"></text></g><g><title>iterencode (json/encoder.py:223) (4 samples, 0.11%)</title><rect x="1.5738%" y="132" width="0.1067%" height="15" fill="rgb(221,193,54)" fg:x="59" fg:w="4"/><text x="1.8238%" y="142.50"></text></g><g><title>iterencode (json/encoder.py:248) (6 samples, 0.16%)</title><rect x="1.7871%" y="132" width="0.1600%" height="15" fill="rgb(248,212,6)" fg:x="67" fg:w="6"/><text x="2.0371%" y="142.50"></text></g><g><title>0x7fe641ccbf60 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="1.8405%" y="148" width="0.1067%" height="15" fill="rgb(208,68,35)" fg:x="69" fg:w="4"/><text x="2.0905%" y="158.50"></text></g><g><title>iterencode (json/encoder.py:249) (5 samples, 0.13%)</title><rect x="1.9472%" y="132" width="0.1334%" height="15" fill="rgb(232,128,0)" fg:x="73" fg:w="5"/><text x="2.1972%" y="142.50"></text></g><g><title>0x7fe641cce5b6 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="2.5073%" y="164" width="0.1067%" height="15" fill="rgb(207,160,47)" fg:x="94" fg:w="4"/><text x="2.7573%" y="174.50"></text></g><g><title>0x7fe641cce23d (_json.cpython-310-x86_64-linux-gnu.so) (21 samples, 0.56%)</title><rect x="2.8541%" y="180" width="0.5601%" height="15" fill="rgb(228,23,34)" fg:x="107" fg:w="21"/><text x="3.1041%" y="190.50"></text></g><g><title>0x7fe641cce7a3 (_json.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.40%)</title><rect x="3.0141%" y="196" width="0.4001%" height="15" fill="rgb(218,30,26)" fg:x="113" fg:w="15"/><text x="3.2641%" y="206.50"></text></g><g><title>0x7fe641cce295 (_json.cpython-310-x86_64-linux-gnu.so) (21 samples, 0.56%)</title><rect x="3.4142%" y="180" width="0.5601%" height="15" fill="rgb(220,122,19)" fg:x="128" fg:w="21"/><text x="3.6642%" y="190.50"></text></g><g><title>0x7fe641cce7a3 (_json.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.35%)</title><rect x="3.6276%" y="196" width="0.3468%" height="15" fill="rgb(250,228,42)" fg:x="136" fg:w="13"/><text x="3.8776%" y="206.50"></text></g><g><title>0x7fe641cce2ec (_json.cpython-310-x86_64-linux-gnu.so) (27 samples, 0.72%)</title><rect x="3.9744%" y="180" width="0.7202%" height="15" fill="rgb(240,193,28)" fg:x="149" fg:w="27"/><text x="4.2244%" y="190.50"></text></g><g><title>0x7fe641cce7a3 (_json.cpython-310-x86_64-linux-gnu.so) (18 samples, 0.48%)</title><rect x="4.2145%" y="196" width="0.4801%" height="15" fill="rgb(216,20,37)" fg:x="158" fg:w="18"/><text x="4.4645%" y="206.50"></text></g><g><title>0x7fe641cce31c (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="4.6946%" y="180" width="0.1067%" height="15" fill="rgb(206,188,39)" fg:x="176" fg:w="4"/><text x="4.9446%" y="190.50"></text></g><g><title>0x7fe641cce324 (_json.cpython-310-x86_64-linux-gnu.so) (18 samples, 0.48%)</title><rect x="4.8013%" y="180" width="0.4801%" height="15" fill="rgb(217,207,13)" fg:x="180" fg:w="18"/><text x="5.0513%" y="190.50"></text></g><g><title>0x7fe641ccdfb0 (_json.cpython-310-x86_64-linux-gnu.so) (7 samples, 0.19%)</title><rect x="5.2814%" y="196" width="0.1867%" height="15" fill="rgb(231,73,38)" fg:x="198" fg:w="7"/><text x="5.5314%" y="206.50"></text></g><g><title>0x7fe641ccdfba (_json.cpython-310-x86_64-linux-gnu.so) (6 samples, 0.16%)</title><rect x="5.4948%" y="196" width="0.1600%" height="15" fill="rgb(225,20,46)" fg:x="206" fg:w="6"/><text x="5.7448%" y="206.50"></text></g><g><title>0x7fe641cce0bb (_json.cpython-310-x86_64-linux-gnu.so) (23 samples, 0.61%)</title><rect x="6.0016%" y="196" width="0.6135%" height="15" fill="rgb(210,31,41)" fg:x="225" fg:w="23"/><text x="6.2516%" y="206.50"></text></g><g><title>0x7fe641cce0c2 (_json.cpython-310-x86_64-linux-gnu.so) (6 samples, 0.16%)</title><rect x="6.6151%" y="196" width="0.1600%" height="15" fill="rgb(221,200,47)" fg:x="248" fg:w="6"/><text x="6.8651%" y="206.50"></text></g><g><title>0x7fe641cce0f1 (_json.cpython-310-x86_64-linux-gnu.so) (8 samples, 0.21%)</title><rect x="6.7751%" y="196" width="0.2134%" height="15" fill="rgb(226,26,5)" fg:x="254" fg:w="8"/><text x="7.0251%" y="206.50"></text></g><g><title>0x7fe642448b8a (libc.so.6) (5 samples, 0.13%)</title><rect x="7.3886%" y="228" width="0.1334%" height="15" fill="rgb(249,33,26)" fg:x="277" fg:w="5"/><text x="7.6386%" y="238.50"></text></g><g><title>0x7fe641cce3d7 (_json.cpython-310-x86_64-linux-gnu.so) (22 samples, 0.59%)</title><rect x="7.0152%" y="196" width="0.5868%" height="15" fill="rgb(235,183,28)" fg:x="263" fg:w="22"/><text x="7.2652%" y="206.50"></text></g><g><title>realloc (libc.so.6) (11 samples, 0.29%)</title><rect x="7.3086%" y="212" width="0.2934%" height="15" fill="rgb(221,5,38)" fg:x="274" fg:w="11"/><text x="7.5586%" y="222.50"></text></g><g><title>0x7fe641cce438 (_json.cpython-310-x86_64-linux-gnu.so) (26 samples, 0.69%)</title><rect x="7.7887%" y="196" width="0.6935%" height="15" fill="rgb(247,18,42)" fg:x="292" fg:w="26"/><text x="8.0387%" y="206.50"></text></g><g><title>0x7fe641cce448 (_json.cpython-310-x86_64-linux-gnu.so) (8 samples, 0.21%)</title><rect x="8.4823%" y="196" width="0.2134%" height="15" fill="rgb(241,131,45)" fg:x="318" fg:w="8"/><text x="8.7323%" y="206.50"></text></g><g><title>0x7fe641cce457 (_json.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.37%)</title><rect x="8.6957%" y="196" width="0.3734%" height="15" fill="rgb(249,31,29)" fg:x="326" fg:w="14"/><text x="8.9457%" y="206.50"></text></g><g><title>0x7fe641cce46b (_json.cpython-310-x86_64-linux-gnu.so) (9 samples, 0.24%)</title><rect x="9.0958%" y="196" width="0.2401%" height="15" fill="rgb(225,111,53)" fg:x="341" fg:w="9"/><text x="9.3458%" y="206.50"></text></g><g><title>0x7fe641cce475 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="9.3358%" y="196" width="0.1067%" height="15" fill="rgb(238,160,17)" fg:x="350" fg:w="4"/><text x="9.5858%" y="206.50"></text></g><g><title>0x7fe641cce4af (_json.cpython-310-x86_64-linux-gnu.so) (32 samples, 0.85%)</title><rect x="9.4692%" y="196" width="0.8536%" height="15" fill="rgb(214,148,48)" fg:x="355" fg:w="32"/><text x="9.7192%" y="206.50"></text></g><g><title>0x7fe641cce4c9 (_json.cpython-310-x86_64-linux-gnu.so) (97 samples, 2.59%)</title><rect x="10.3494%" y="196" width="2.5874%" height="15" fill="rgb(232,36,49)" fg:x="388" fg:w="97"/><text x="10.5994%" y="206.50">0x..</text></g><g><title>0x7fe641cce4e2 (_json.cpython-310-x86_64-linux-gnu.so) (151 samples, 4.03%)</title><rect x="12.9901%" y="196" width="4.0277%" height="15" fill="rgb(209,103,24)" fg:x="487" fg:w="151"/><text x="13.2401%" y="206.50">0x7f..</text></g><g><title>0x7fe641cce4f5 (_json.cpython-310-x86_64-linux-gnu.so) (28 samples, 0.75%)</title><rect x="17.0712%" y="196" width="0.7469%" height="15" fill="rgb(229,88,8)" fg:x="640" fg:w="28"/><text x="17.3212%" y="206.50"></text></g><g><title>0x7fe64254c800 (libc.so.6) (4 samples, 0.11%)</title><rect x="25.7669%" y="212" width="0.1067%" height="15" fill="rgb(213,181,19)" fg:x="966" fg:w="4"/><text x="26.0169%" y="222.50"></text></g><g><title>0x7fe64254c8b3 (libc.so.6) (6 samples, 0.16%)</title><rect x="25.9269%" y="212" width="0.1600%" height="15" fill="rgb(254,191,54)" fg:x="972" fg:w="6"/><text x="26.1769%" y="222.50"></text></g><g><title>0x7fe64254c8bf (libc.so.6) (5 samples, 0.13%)</title><rect x="26.1670%" y="212" width="0.1334%" height="15" fill="rgb(241,83,37)" fg:x="981" fg:w="5"/><text x="26.4170%" y="222.50"></text></g><g><title>0x7fe641cce505 (_json.cpython-310-x86_64-linux-gnu.so) (324 samples, 8.64%)</title><rect x="17.8181%" y="196" width="8.6423%" height="15" fill="rgb(233,36,39)" fg:x="668" fg:w="324"/><text x="18.0681%" y="206.50">0x7fe641cce5..</text></g><g><title>0x7fe641cce524 (_json.cpython-310-x86_64-linux-gnu.so) (40 samples, 1.07%)</title><rect x="26.4604%" y="196" width="1.0670%" height="15" fill="rgb(226,3,54)" fg:x="992" fg:w="40"/><text x="26.7104%" y="206.50"></text></g><g><title>0x7fe641cc9660 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="27.4206%" y="212" width="0.1067%" height="15" fill="rgb(245,192,40)" fg:x="1028" fg:w="4"/><text x="27.6706%" y="222.50"></text></g><g><title>0x7fe641cce548 (_json.cpython-310-x86_64-linux-gnu.so) (193 samples, 5.15%)</title><rect x="27.5540%" y="196" width="5.1480%" height="15" fill="rgb(238,167,29)" fg:x="1033" fg:w="193"/><text x="27.8040%" y="206.50">0x7fe6..</text></g><g><title>0x7fe641cce57f (_json.cpython-310-x86_64-linux-gnu.so) (8 samples, 0.21%)</title><rect x="32.9154%" y="196" width="0.2134%" height="15" fill="rgb(232,182,51)" fg:x="1234" fg:w="8"/><text x="33.1654%" y="206.50"></text></g><g><title>0x7fe641cce59a (_json.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.35%)</title><rect x="33.2089%" y="196" width="0.3468%" height="15" fill="rgb(231,60,39)" fg:x="1245" fg:w="13"/><text x="33.4589%" y="206.50"></text></g><g><title>0x7fe641cce5a2 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="33.5556%" y="196" width="0.1067%" height="15" fill="rgb(208,69,12)" fg:x="1258" fg:w="4"/><text x="33.8056%" y="206.50"></text></g><g><title>0x7fe641ccb1f4 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="34.3292%" y="212" width="0.1067%" height="15" fill="rgb(235,93,37)" fg:x="1287" fg:w="4"/><text x="34.5792%" y="222.50"></text></g><g><title>0x7fe641ccb208 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="34.4625%" y="212" width="0.1067%" height="15" fill="rgb(213,116,39)" fg:x="1292" fg:w="4"/><text x="34.7125%" y="222.50"></text></g><g><title>0x7fe641ccb29d (_json.cpython-310-x86_64-linux-gnu.so) (52 samples, 1.39%)</title><rect x="34.7559%" y="212" width="1.3870%" height="15" fill="rgb(222,207,29)" fg:x="1303" fg:w="52"/><text x="35.0059%" y="222.50"></text></g><g><title>0x7fe641ccb2c2 (_json.cpython-310-x86_64-linux-gnu.so) (6 samples, 0.16%)</title><rect x="36.2763%" y="212" width="0.1600%" height="15" fill="rgb(206,96,30)" fg:x="1360" fg:w="6"/><text x="36.5263%" y="222.50"></text></g><g><title>0x7fe641cce5b6 (_json.cpython-310-x86_64-linux-gnu.so) (118 samples, 3.15%)</title><rect x="33.7157%" y="196" width="3.1475%" height="15" fill="rgb(218,138,4)" fg:x="1264" fg:w="118"/><text x="33.9657%" y="206.50">0x7..</text></g><g><title>0x7fe641cce5dc (_json.cpython-310-x86_64-linux-gnu.so) (29 samples, 0.77%)</title><rect x="36.9432%" y="196" width="0.7735%" height="15" fill="rgb(250,191,14)" fg:x="1385" fg:w="29"/><text x="37.1932%" y="206.50"></text></g><g><title>0x7fe641cc9700 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="38.8370%" y="212" width="0.1067%" height="15" fill="rgb(239,60,40)" fg:x="1456" fg:w="4"/><text x="39.0870%" y="222.50"></text></g><g><title>0x7fe641cce5ff (_json.cpython-310-x86_64-linux-gnu.so) (50 samples, 1.33%)</title><rect x="37.7967%" y="196" width="1.3337%" height="15" fill="rgb(206,27,48)" fg:x="1417" fg:w="50"/><text x="38.0467%" y="206.50"></text></g><g><title>realloc (libc.so.6) (7 samples, 0.19%)</title><rect x="38.9437%" y="212" width="0.1867%" height="15" fill="rgb(225,35,8)" fg:x="1460" fg:w="7"/><text x="39.1937%" y="222.50"></text></g><g><title>0x7fe641ccb254 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="40.0373%" y="228" width="0.1067%" height="15" fill="rgb(250,213,24)" fg:x="1501" fg:w="4"/><text x="40.2873%" y="238.50"></text></g><g><title>0x7fe641ccb257 (_json.cpython-310-x86_64-linux-gnu.so) (6 samples, 0.16%)</title><rect x="40.1440%" y="228" width="0.1600%" height="15" fill="rgb(247,123,22)" fg:x="1505" fg:w="6"/><text x="40.3940%" y="238.50"></text></g><g><title>0x7fe641ccb29d (_json.cpython-310-x86_64-linux-gnu.so) (54 samples, 1.44%)</title><rect x="40.4374%" y="228" width="1.4404%" height="15" fill="rgb(231,138,38)" fg:x="1516" fg:w="54"/><text x="40.6874%" y="238.50"></text></g><g><title>0x7fe641ccb3f2 (_json.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.13%)</title><rect x="42.0912%" y="228" width="0.1334%" height="15" fill="rgb(231,145,46)" fg:x="1578" fg:w="5"/><text x="42.3412%" y="238.50"></text></g><g><title>0x7fe641cce3c4 (_json.cpython-310-x86_64-linux-gnu.so) (104 samples, 2.77%)</title><rect x="39.5572%" y="212" width="2.7741%" height="15" fill="rgb(251,118,11)" fg:x="1483" fg:w="104"/><text x="39.8072%" y="222.50">0x..</text></g><g><title>0x7fe641cce3d7 (_json.cpython-310-x86_64-linux-gnu.so) (39 samples, 1.04%)</title><rect x="42.3846%" y="212" width="1.0403%" height="15" fill="rgb(217,147,25)" fg:x="1589" fg:w="39"/><text x="42.6346%" y="222.50"></text></g><g><title>0x7fe641cce3f0 (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="43.4783%" y="212" width="0.1067%" height="15" fill="rgb(247,81,37)" fg:x="1630" fg:w="4"/><text x="43.7283%" y="222.50"></text></g><g><title>0x7fe641cce40e (_json.cpython-310-x86_64-linux-gnu.so) (133 samples, 3.55%)</title><rect x="43.6383%" y="212" width="3.5476%" height="15" fill="rgb(209,12,38)" fg:x="1636" fg:w="133"/><text x="43.8883%" y="222.50">0x7f..</text></g><g><title>0x7fe641cce638 (_json.cpython-310-x86_64-linux-gnu.so) (301 samples, 8.03%)</title><rect x="39.2371%" y="196" width="8.0288%" height="15" fill="rgb(227,1,9)" fg:x="1471" fg:w="301"/><text x="39.4871%" y="206.50">0x7fe641cce..</text></g><g><title>0x7fe641cce6ed (_json.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.13%)</title><rect x="47.3726%" y="196" width="0.1334%" height="15" fill="rgb(248,47,43)" fg:x="1776" fg:w="5"/><text x="47.6226%" y="206.50"></text></g><g><title>0x7fe641cce70a (_json.cpython-310-x86_64-linux-gnu.so) (34 samples, 0.91%)</title><rect x="47.5060%" y="196" width="0.9069%" height="15" fill="rgb(221,10,30)" fg:x="1781" fg:w="34"/><text x="47.7560%" y="206.50"></text></g><g><title>0x7fe641cce720 (_json.cpython-310-x86_64-linux-gnu.so) (155 samples, 4.13%)</title><rect x="48.4663%" y="196" width="4.1344%" height="15" fill="rgb(210,229,1)" fg:x="1817" fg:w="155"/><text x="48.7163%" y="206.50">0x7fe..</text></g><g><title>0x7fe641cce741 (_json.cpython-310-x86_64-linux-gnu.so) (17 samples, 0.45%)</title><rect x="52.7074%" y="196" width="0.4535%" height="15" fill="rgb(222,148,37)" fg:x="1976" fg:w="17"/><text x="52.9574%" y="206.50"></text></g><g><title>0x7fe641cce74e (_json.cpython-310-x86_64-linux-gnu.so) (37 samples, 0.99%)</title><rect x="53.1875%" y="196" width="0.9869%" height="15" fill="rgb(234,67,33)" fg:x="1994" fg:w="37"/><text x="53.4375%" y="206.50"></text></g><g><title>realloc (libc.so.6) (6 samples, 0.16%)</title><rect x="54.0144%" y="212" width="0.1600%" height="15" fill="rgb(247,98,35)" fg:x="2025" fg:w="6"/><text x="54.2644%" y="222.50"></text></g><g><title>0x7fe64254c8b6 (libc.so.6) (6 samples, 0.16%)</title><rect x="83.3289%" y="212" width="0.1600%" height="15" fill="rgb(247,138,52)" fg:x="3124" fg:w="6"/><text x="83.5789%" y="222.50"></text></g><g><title>0x7fe64254eba5 (libc.so.6) (5 samples, 0.13%)</title><rect x="83.7557%" y="212" width="0.1334%" height="15" fill="rgb(213,79,30)" fg:x="3140" fg:w="5"/><text x="84.0057%" y="222.50"></text></g><g><title>0x7fe641cce338 (_json.cpython-310-x86_64-linux-gnu.so) (2,965 samples, 79.09%)</title><rect x="5.2814%" y="180" width="79.0878%" height="15" fill="rgb(246,177,23)" fg:x="198" fg:w="2965"/><text x="5.5314%" y="190.50">0x7fe641cce338 (_json.cpython-310-x86_64-linux-gnu.so)</text></g><g><title>0x7fe641cce7a3 (_json.cpython-310-x86_64-linux-gnu.so) (1,130 samples, 30.14%)</title><rect x="54.2278%" y="196" width="30.1414%" height="15" fill="rgb(230,62,27)" fg:x="2033" fg:w="1130"/><text x="54.4778%" y="206.50">0x7fe641cce7a3 (_json.cpython-310-x86_64-linux-gn..</text></g><g><title>0x7fe641cce34f (_json.cpython-310-x86_64-linux-gnu.so) (6 samples, 0.16%)</title><rect x="84.4225%" y="180" width="0.1600%" height="15" fill="rgb(216,154,8)" fg:x="3165" fg:w="6"/><text x="84.6725%" y="190.50"></text></g><g><title>0x7fe641ccb3ab (_json.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.13%)</title><rect x="84.8226%" y="196" width="0.1334%" height="15" fill="rgb(244,35,45)" fg:x="3180" fg:w="5"/><text x="85.0726%" y="206.50"></text></g><g><title>0x7fe641cce3c4 (_json.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.32%)</title><rect x="84.7159%" y="180" width="0.3201%" height="15" fill="rgb(251,115,12)" fg:x="3176" fg:w="12"/><text x="84.9659%" y="190.50"></text></g><g><title>0x7fe641cce40e (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="85.0360%" y="180" width="0.1067%" height="15" fill="rgb(240,54,50)" fg:x="3188" fg:w="4"/><text x="85.2860%" y="190.50"></text></g><g><title>0x7fe641cce505 (_json.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.13%)</title><rect x="85.1694%" y="180" width="0.1334%" height="15" fill="rgb(233,84,52)" fg:x="3193" fg:w="5"/><text x="85.4194%" y="190.50"></text></g><g><title>0x7fe641cce548 (_json.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.13%)</title><rect x="85.3294%" y="180" width="0.1334%" height="15" fill="rgb(207,117,47)" fg:x="3199" fg:w="5"/><text x="85.5794%" y="190.50"></text></g><g><title>0x7fe641ccb16e (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="85.5428%" y="196" width="0.1067%" height="15" fill="rgb(249,43,39)" fg:x="3207" fg:w="4"/><text x="85.7928%" y="206.50"></text></g><g><title>0x7fe641cce5b6 (_json.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.37%)</title><rect x="85.5161%" y="180" width="0.3734%" height="15" fill="rgb(209,38,44)" fg:x="3206" fg:w="14"/><text x="85.7661%" y="190.50"></text></g><g><title>0x7fe641ccb3ab (_json.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.11%)</title><rect x="85.7829%" y="196" width="0.1067%" height="15" fill="rgb(236,212,23)" fg:x="3216" fg:w="4"/><text x="86.0329%" y="206.50"></text></g><g><title>0x7fe641cce5dc (_json.cpython-310-x86_64-linux-gnu.so) (7 samples, 0.19%)</title><rect x="85.8896%" y="180" width="0.1867%" height="15" fill="rgb(242,79,21)" fg:x="3220" fg:w="7"/><text x="86.1396%" y="190.50"></text></g><g><title>0x7fe641ccd7ee (_json.cpython-310-x86_64-linux-gnu.so) (3,187 samples, 85.01%)</title><rect x="2.2406%" y="148" width="85.0093%" height="15" fill="rgb(211,96,35)" fg:x="84" fg:w="3187"/><text x="2.4906%" y="158.50">0x7fe641ccd7ee (_json.cpython-310-x86_64-linux-gnu.so)</text></g><g><title>0x7fe641cce638 (_json.cpython-310-x86_64-linux-gnu.so) (3,171 samples, 84.58%)</title><rect x="2.6674%" y="164" width="84.5826%" height="15" fill="rgb(253,215,40)" fg:x="100" fg:w="3171"/><text x="2.9174%" y="174.50">0x7fe641cce638 (_json.cpython-310-x86_64-linux-gnu.so)</text></g><g><title>0x7fe641cce8ce (_json.cpython-310-x86_64-linux-gnu.so) (34 samples, 0.91%)</title><rect x="86.3430%" y="180" width="0.9069%" height="15" fill="rgb(211,81,21)" fg:x="3237" fg:w="34"/><text x="86.5930%" y="190.50"></text></g><g><title>0x7fe64254bcc0 (libc.so.6) (20 samples, 0.53%)</title><rect x="97.4927%" y="164" width="0.5335%" height="15" fill="rgb(208,190,38)" fg:x="3655" fg:w="20"/><text x="97.7427%" y="174.50"></text></g><g><title>0x7fe64254bcc7 (libc.so.6) (6 samples, 0.16%)</title><rect x="98.0261%" y="164" width="0.1600%" height="15" fill="rgb(235,213,38)" fg:x="3675" fg:w="6"/><text x="98.2761%" y="174.50"></text></g><g><title>0x7fe64254bd00 (libc.so.6) (9 samples, 0.24%)</title><rect x="98.1862%" y="164" width="0.2401%" height="15" fill="rgb(237,122,38)" fg:x="3681" fg:w="9"/><text x="98.4362%" y="174.50"></text></g><g><title>0x7fe64254bd14 (libc.so.6) (4 samples, 0.11%)</title><rect x="98.5063%" y="164" width="0.1067%" height="15" fill="rgb(244,218,35)" fg:x="3693" fg:w="4"/><text x="98.7563%" y="174.50"></text></g><g><title>0x7fe64254bd1d (libc.so.6) (5 samples, 0.13%)</title><rect x="98.6663%" y="164" width="0.1334%" height="15" fill="rgb(240,68,47)" fg:x="3699" fg:w="5"/><text x="98.9163%" y="174.50"></text></g><g><title>0x7fe64254bd22 (libc.so.6) (15 samples, 0.40%)</title><rect x="98.7997%" y="164" width="0.4001%" height="15" fill="rgb(210,16,53)" fg:x="3704" fg:w="15"/><text x="99.0497%" y="174.50"></text></g><g><title>0x7fe64254bd3c (libc.so.6) (4 samples, 0.11%)</title><rect x="99.4132%" y="164" width="0.1067%" height="15" fill="rgb(235,124,12)" fg:x="3727" fg:w="4"/><text x="99.6632%" y="174.50"></text></g><g><title>free (libc.so.6) (6 samples, 0.16%)</title><rect x="99.5199%" y="164" width="0.1600%" height="15" fill="rgb(224,169,11)" fg:x="3731" fg:w="6"/><text x="99.7699%" y="174.50"></text></g><g><title>0x7fe642446d2b (libc.so.6) (4 samples, 0.11%)</title><rect x="99.5732%" y="180" width="0.1067%" height="15" fill="rgb(250,166,2)" fg:x="3733" fg:w="4"/><text x="99.8232%" y="190.50"></text></g><g><title>encode (json/encoder.py:199) (3,698 samples, 98.64%)</title><rect x="1.0670%" y="116" width="98.6396%" height="15" fill="rgb(242,216,29)" fg:x="40" fg:w="3698"/><text x="1.3170%" y="126.50">encode (json/encoder.py:199)</text></g><g><title>iterencode (json/encoder.py:257) (3,658 samples, 97.57%)</title><rect x="2.1339%" y="132" width="97.5727%" height="15" fill="rgb(230,116,27)" fg:x="80" fg:w="3658"/><text x="2.3839%" y="142.50">iterencode (json/encoder.py:257)</text></g><g><title>0x7fe641ccd7fe (_json.cpython-310-x86_64-linux-gnu.so) (467 samples, 12.46%)</title><rect x="87.2499%" y="148" width="12.4567%" height="15" fill="rgb(228,99,48)" fg:x="3271" fg:w="467"/><text x="87.4999%" y="158.50">0x7fe641ccd7fe (_js..</text></g><g><title>encode (json/encoder.py:200) (6 samples, 0.16%)</title><rect x="99.7066%" y="116" width="0.1600%" height="15" fill="rgb(253,11,6)" fg:x="3738" fg:w="6"/><text x="99.9566%" y="126.50"></text></g><g><title>&lt;module&gt; (&lt;stdin&gt;:10) (3,745 samples, 99.89%)</title><rect x="0.0000%" y="84" width="99.8933%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="3745"/><text x="0.2500%" y="94.50">&lt;module&gt; (&lt;stdin&gt;:10)</text></g><g><title>dumps (json/__init__.py:238) (3,707 samples, 98.88%)</title><rect x="1.0136%" y="100" width="98.8797%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="3707"/><text x="1.2636%" y="110.50">dumps (json/__init__.py:238)</text></g><g><title>all (3,749 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="3749"/><text x="0.2500%" y="62.50"></text></g><g><title>0x7fe6423cdd90 (libc.so.6) (3,749 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="3749"/><text x="0.2500%" y="78.50">0x7fe6423cdd90 (libc.so.6)</text></g></svg></svg>