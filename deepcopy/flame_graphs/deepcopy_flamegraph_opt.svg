<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="181" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="191.5" ></text>
</g>
<g >
<title>PyFrame_BlockSetup (52,093,928 samples, 0.14%)</title><rect x="33.7" y="213" width="1.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="36.70" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,058,022 samples, 0.07%)</title><rect x="628.2" y="181" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="631.19" y="191.5" ></text>
</g>
<g >
<title>object_vacall (495,018,592 samples, 1.32%)</title><rect x="1173.6" y="229" width="15.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1176.64" y="239.5" ></text>
</g>
<g >
<title>PyObject_IS_GC (13,986,279 samples, 0.04%)</title><rect x="49.1" y="213" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="52.11" y="223.5" ></text>
</g>
<g >
<title>_PyTuple_FromArray (130,052,059 samples, 0.35%)</title><rect x="69.8" y="197" width="4.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="72.82" y="207.5" ></text>
</g>
<g >
<title>insertdict (26,058,173 samples, 0.07%)</title><rect x="1166.2" y="229" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1169.19" y="239.5" ></text>
</g>
<g >
<title>lookdict (1,640,077,690 samples, 4.36%)</title><rect x="1006.7" y="213" width="51.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1009.65" y="223.5" >lookd..</text>
</g>
<g >
<title>_Py_Dealloc (182,360,203 samples, 0.49%)</title><rect x="859.5" y="213" width="5.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="862.46" y="223.5" ></text>
</g>
<g >
<title>_PyObject_Calloc (26,061,883 samples, 0.07%)</title><rect x="1133.3" y="229" width="0.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1136.29" y="239.5" ></text>
</g>
<g >
<title>_PyType_Lookup (624,755,430 samples, 1.66%)</title><rect x="813.7" y="213" width="19.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="816.68" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="53" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="63.5" ></text>
</g>
<g >
<title>method_vectorcall_FASTCALL (257,834,345 samples, 0.69%)</title><rect x="1058.2" y="213" width="8.0" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1061.15" y="223.5" ></text>
</g>
<g >
<title>[unknown] (34,212,063,392 samples, 91.04%)</title><rect x="28.8" y="229" width="1074.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="31.80" y="239.5" >[unknown]</text>
</g>
<g >
<title>vgetargs1_impl (78,156,849 samples, 0.21%)</title><rect x="1100.6" y="213" width="2.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1103.58" y="223.5" ></text>
</g>
<g >
<title>dict_get (104,233,673 samples, 0.28%)</title><rect x="1160.5" y="229" width="3.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1163.46" y="239.5" ></text>
</g>
<g >
<title>all (37,580,584,633 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>object_vacall (494,514,550 samples, 1.32%)</title><rect x="1070.3" y="213" width="15.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1073.34" y="223.5" ></text>
</g>
<g >
<title>PyObject_GC_UnTrack (26,052,926 samples, 0.07%)</title><rect x="40.0" y="213" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="43.04" y="223.5" ></text>
</g>
<g >
<title>list_dealloc (104,224,659 samples, 0.28%)</title><rect x="996.8" y="213" width="3.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="999.84" y="223.5" ></text>
</g>
<g >
<title>_PyObject_Malloc (25,901,479 samples, 0.07%)</title><rect x="799.0" y="213" width="0.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="801.97" y="223.5" ></text>
</g>
<g >
<title>python3 (37,580,584,632 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >python3</text>
</g>
<g >
<title>PyFrame_BlockPop (26,061,464 samples, 0.07%)</title><rect x="32.9" y="213" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="35.88" y="223.5" ></text>
</g>
<g >
<title>PyObject_Hash (260,488,772 samples, 0.69%)</title><rect x="40.9" y="213" width="8.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="43.93" y="223.5" ></text>
</g>
<g >
<title>insertdict (156,239,374 samples, 0.42%)</title><rect x="991.1" y="213" width="4.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="994.12" y="223.5" ></text>
</g>
<g >
<title>_PyEval_Vector (650,501,100 samples, 1.73%)</title><rect x="713.2" y="213" width="20.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="716.16" y="223.5" ></text>
</g>
<g >
<title>tupledealloc (104,214,926 samples, 0.28%)</title><rect x="1095.7" y="213" width="3.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1098.67" y="223.5" ></text>
</g>
<g >
<title>[unknown] (828,364,896 samples, 2.20%)</title><rect x="66.7" y="213" width="26.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="69.70" y="223.5" >[..</text>
</g>
<g >
<title>list_append (26,058,880 samples, 0.07%)</title><rect x="996.0" y="213" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="999.03" y="223.5" ></text>
</g>
<g >
<title>PyLong_FromVoidPtr (78,161,447 samples, 0.21%)</title><rect x="35.9" y="213" width="2.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="38.95" y="223.5" ></text>
</g>
<g >
<title>PyObject_CallFunctionObjArgs (52,098,976 samples, 0.14%)</title><rect x="38.4" y="213" width="1.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="41.40" y="223.5" ></text>
</g>
<g >
<title>dict_subscript (52,076,860 samples, 0.14%)</title><rect x="917.5" y="213" width="1.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="920.52" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,058,022 samples, 0.07%)</title><rect x="628.2" y="197" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="631.19" y="207.5" ></text>
</g>
<g >
<title>PyDict_Next (103,962,685 samples, 0.28%)</title><rect x="28.8" y="213" width="3.3" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="31.80" y="223.5" ></text>
</g>
<g >
<title>method_vectorcall_O (52,119,251 samples, 0.14%)</title><rect x="1066.2" y="213" width="1.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1069.25" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="197" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="207.5" ></text>
</g>
<g >
<title>_PyObject_MakeTpCall (78,174,369 samples, 0.21%)</title><rect x="796.5" y="213" width="2.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="799.51" y="223.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (26,063,721 samples, 0.07%)</title><rect x="1189.2" y="229" width="0.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.18" y="239.5" ></text>
</g>
<g >
<title>_Py_NewReference (156,267,644 samples, 0.42%)</title><rect x="1140.0" y="229" width="4.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1143.03" y="239.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="69" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="79.5" ></text>
</g>
<g >
<title>PyObject_RichCompareBool (26,045,577 samples, 0.07%)</title><rect x="49.5" y="213" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="52.55" y="223.5" ></text>
</g>
<g >
<title>insert_to_emptydict (104,227,745 samples, 0.28%)</title><rect x="987.8" y="213" width="3.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="990.85" y="223.5" ></text>
</g>
<g >
<title>_PyEval_EvalFrameDefault (17,080,134,794 samples, 45.45%)</title><rect x="92.7" y="213" width="536.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="95.71" y="223.5" >_PyEval_EvalFrameDefault</text>
</g>
<g >
<title>frame_dealloc (2,135,746,123 samples, 5.68%)</title><rect x="919.2" y="213" width="67.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="922.15" y="223.5" >frame_d..</text>
</g>
<g >
<title>PyList_New (26,059,105 samples, 0.07%)</title><rect x="10.0" y="229" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>_PyObject_GC_New (26,061,096 samples, 0.07%)</title><rect x="763.0" y="213" width="0.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="765.98" y="223.5" ></text>
</g>
<g >
<title>PyThreadState_Get (364,145,217 samples, 0.97%)</title><rect x="55.3" y="213" width="11.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="58.26" y="223.5" ></text>
</g>
<g >
<title>_PyFrame_New_NoTrack (182,376,439 samples, 0.49%)</title><rect x="733.6" y="213" width="5.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="736.58" y="223.5" ></text>
</g>
<g >
<title>_PyTrash_end (52,112,819 samples, 0.14%)</title><rect x="812.0" y="213" width="1.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="815.05" y="223.5" ></text>
</g>
<g >
<title>_PyTrash_cond (156,243,069 samples, 0.42%)</title><rect x="807.1" y="213" width="4.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="810.14" y="223.5" ></text>
</g>
<g >
<title>PyMem_Calloc (26,037,851 samples, 0.07%)</title><rect x="20.6" y="229" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="23.62" y="239.5" ></text>
</g>
<g >
<title>_PyObject_Malloc (136,451,576 samples, 0.36%)</title><rect x="1135.7" y="229" width="4.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1138.74" y="239.5" ></text>
</g>
<g >
<title>dictresize (78,161,549 samples, 0.21%)</title><rect x="1163.7" y="229" width="2.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1166.74" y="239.5" ></text>
</g>
<g >
<title>object_dealloc (78,173,394 samples, 0.21%)</title><rect x="1067.9" y="213" width="2.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1070.88" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="165" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="175.5" ></text>
</g>
<g >
<title>_int_malloc (26,058,631 samples, 0.07%)</title><rect x="67.5" y="181" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="70.52" y="191.5" ></text>
</g>
<g >
<title>[unknown] (26,058,022 samples, 0.07%)</title><rect x="628.2" y="165" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="631.19" y="175.5" ></text>
</g>
<g >
<title>dict_get (1,171,813,414 samples, 3.12%)</title><rect x="880.7" y="213" width="36.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="883.72" y="223.5" >dic..</text>
</g>
<g >
<title>PySys_Audit (156,023,382 samples, 0.42%)</title><rect x="50.4" y="213" width="4.9" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="53.36" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="37" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="47.5" ></text>
</g>
<g >
<title>PyLong_FromVoidPtr (312,276,227 samples, 0.83%)</title><rect x="10.8" y="229" width="9.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.82" y="239.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="149" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="159.5" ></text>
</g>
<g >
<title>_PyObject_Free (519,805,469 samples, 1.38%)</title><rect x="746.7" y="213" width="16.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="749.66" y="223.5" ></text>
</g>
<g >
<title>convertitem (130,188,787 samples, 0.35%)</title><rect x="874.2" y="213" width="4.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="877.18" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,058,022 samples, 0.07%)</title><rect x="628.2" y="149" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="631.19" y="159.5" ></text>
</g>
<g >
<title>PyObject_RichCompare (26,042,252 samples, 0.07%)</title><rect x="66.7" y="197" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="69.70" y="207.5" ></text>
</g>
<g >
<title>sys_audit_tstate (312,210,256 samples, 0.83%)</title><rect x="1085.9" y="213" width="9.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1088.87" y="223.5" ></text>
</g>
<g >
<title>deepcopy_list_c (26,040,860 samples, 0.07%)</title><rect x="879.1" y="213" width="0.8" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="882.09" y="223.5" ></text>
</g>
<g >
<title>deepcopy_dict_c (26,006,293 samples, 0.07%)</title><rect x="878.3" y="213" width="0.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="881.27" y="223.5" ></text>
</g>
<g >
<title>PyImport_ImportModuleLevelObject (19,434,279 samples, 0.05%)</title><rect x="35.3" y="213" width="0.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="38.34" y="223.5" ></text>
</g>
<g >
<title>PyDict_SetItem (26,062,107 samples, 0.07%)</title><rect x="32.1" y="213" width="0.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="35.06" y="223.5" ></text>
</g>
<g >
<title>_PyTrash_begin (234,372,677 samples, 0.62%)</title><rect x="799.8" y="213" width="7.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="802.78" y="223.5" ></text>
</g>
<g >
<title>_PyObject_GC_New (52,110,498 samples, 0.14%)</title><rect x="1134.1" y="229" width="1.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1137.11" y="239.5" ></text>
</g>
<g >
<title>_int_free (52,101,204 samples, 0.14%)</title><rect x="866.0" y="213" width="1.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="869.00" y="223.5" ></text>
</g>
<g >
<title>_PyFunction_Vectorcall (234,120,985 samples, 0.62%)</title><rect x="739.3" y="213" width="7.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="742.31" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,058,631 samples, 0.07%)</title><rect x="67.5" y="197" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="70.52" y="207.5" ></text>
</g>
<g >
<title>deepcopy_list_c (494,554,595 samples, 1.32%)</title><rect x="1144.9" y="229" width="15.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1147.93" y="239.5" ></text>
</g>
<g >
<title>dict_dealloc (26,044,372 samples, 0.07%)</title><rect x="879.9" y="213" width="0.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="882.90" y="223.5" ></text>
</g>
<g >
<title>free_keys_object (52,092,520 samples, 0.14%)</title><rect x="986.2" y="213" width="1.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="989.21" y="223.5" ></text>
</g>
<g >
<title>method_vectorcall_FASTCALL (208,387,695 samples, 0.55%)</title><rect x="1167.1" y="229" width="6.5" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1170.10" y="239.5" ></text>
</g>
<g >
<title>_PyFrame_New_NoTrack (963,599,922 samples, 2.56%)</title><rect x="1103.0" y="229" width="30.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1106.03" y="239.5" >_P..</text>
</g>
<g >
<title>cfunction_call (26,020,711 samples, 0.07%)</title><rect x="867.6" y="213" width="0.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="870.64" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="85" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="95.5" ></text>
</g>
<g >
<title>PyObject_CallFunctionObjArgs (234,386,873 samples, 0.62%)</title><rect x="21.4" y="229" width="7.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="24.44" y="239.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="133" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="143.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="101" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="111.5" ></text>
</g>
<g >
<title>_Py_HashPointer (26,050,586 samples, 0.07%)</title><rect x="865.2" y="213" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="868.19" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,027,995 samples, 0.07%)</title><rect x="1094.9" y="117" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1097.85" y="127.5" ></text>
</g>
<g >
<title>_PyObject_GetMethod (1,041,908,422 samples, 2.77%)</title><rect x="763.8" y="213" width="32.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="766.80" y="223.5" >_P..</text>
</g>
<g >
<title>long_hash (208,231,300 samples, 0.55%)</title><rect x="1000.1" y="213" width="6.6" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1003.12" y="223.5" ></text>
</g>
<g >
<title>[unknown] (26,058,022 samples, 0.07%)</title><rect x="628.2" y="133" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="631.19" y="143.5" ></text>
</g>
<g >
<title>_PyObject_Realloc (47,432,213 samples, 0.13%)</title><rect x="68.3" y="197" width="1.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="71.33" y="207.5" ></text>
</g>
<g >
<title>cfunction_vectorcall_O (182,293,849 samples, 0.49%)</title><rect x="868.5" y="213" width="5.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="871.46" y="223.5" ></text>
</g>
<g >
<title>_Py_CheckFunctionResult (833,136,721 samples, 2.22%)</title><rect x="833.3" y="213" width="26.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="836.30" y="223.5" >_..</text>
</g>
<g >
<title>lookdict (598,779,741 samples, 1.59%)</title><rect x="73.9" y="197" width="18.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="76.91" y="207.5" ></text>
</g>
<g >
<title>type_vectorcall (52,122,901 samples, 0.14%)</title><rect x="1098.9" y="213" width="1.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1101.94" y="223.5" ></text>
</g>
<g >
<title>_PyEval_MakeFrameVector (2,679,900,744 samples, 7.13%)</title><rect x="629.0" y="213" width="84.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="632.01" y="223.5" >_PyEval_M..</text>
</g>
</g>
</svg>
